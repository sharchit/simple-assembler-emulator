********************************************************************************************
TITLE: Claims																												
AUTHOR: Archit Sharma
ROLL NO.: 2101AI05
STUDENT ID: archit_2101ai05@iitp.ac.in

#DECLARATION OF AUTHORSHIP
All contents of this file have been solely written by me for CS210 assignment at the Dept.
of Computer Science and Engineering IIT Patna.
********************************************************************************************

FILES:
    *Submitted Files: asm.cpp, emu.cpp, claims, txt, (5) sample programs, (15) output files.

    *All the files I submitted (except the three generated output files) have my name and student id at the
    start of the program along with "DECLARATION OF AUTHORSHIP".

    *The evidence for assembler including the three output files (i.e. <file>.o, <file>.log, <file>.lst)
    generated for each of the 5 sample program has also been uploaded. The test files are generating the 
    correctoutput files to the best of my understanding, and as an evidence they can be tested using the emu.

    *My programs did not show any errors when compiled on my end using "g++ asm.cpp -o asm" & passed 
    file name using "./asm <filename>" and "g++ emu.cpp -o emu" along with "./emu <filename>"

    *G++ version 11.2.0 (MYS64 for windows) was used, compatibility with ISO C++20 standard was checked.

PROGRAM FORMAT AND STRUCTURE:
    1. The assembler
        *The input file is passed to an internal format in a single pass.
        *A data structure label Table is created to store the label and the program count at which it is
        listed.
        *The assembler has the ability to detect the following-
            *Invalid mnemonic or mnemonic passed with incorrect numbel of arguments.
            *Invalid Label Name
            *Invalid Number format
            *Duplicate Labels
        *The instruction are generated using getInstruction function.
        *Can deal with SET command
        *The program is understandable with self-explanatory names.
        *<filename>.o contains the binary code.
        *<filename>.lst contains the binary code in a readable format.
        *<filename>.log contains the errors if encountered while execution.
        *While execution the assembler generates helpful messages summarising the progress of the compiler.

    2. The emulator
        *The input is taken from console in the format - "emu <filename> <-trace>" -trace is optional and
        will show the output in a easily understandable form on console.
        *A .trace file is produced which shows log history of the emulation.
        *Certain errors like "Illegal Memory Access", "Invalid filename" etc. are considered.
    *****The emulator reserves 2MB data for storage but it can be changed by editing "MEMORY_CAPACITY" macro
        in the source file.
    *****The emulator can only execute 1000 instruction by default but this can be changed by editing 
        "EXECUTION_LIMIT" macro in source file.
        *The infinite loop detection is not able to determine the infinite loop in all cases.
        *The emulator will "produce" output file even if a file with error is sent and so it will the
        user responsibility to only use the correct input file.
    
TESTING
    1. The assembler
        I have tested six sample program summarised bellow. The errors only occurred in the file test2.asm and test4.asm.

        The others were tested without any errors detected and produced three output files, listing file, 
        error log file and machine readable object file, for each example. 

        1)
        #Input: asm test1.asm
        #Output: 
        a. test1.lst
        b. test1.log (with Warning)
        c. test1.o

        2)
        #Input:asm test2.asm
        #Output: 
        a. test2.lst
        b. test2.log (with error messages shown as below but also in log file)
        c. test2.o

        3)
        #Input:asm test3.asm
        #Output: 
        a. test3.lst
        b. test3.log (without any error messages)
        c. test3.o

        4)
        #Input:asm test4.asm
        #Output: 
        a. test4.lst
        b. test4.log (without any error messages)
        c. test4.o

        5)
        #Input:asm test5.asm
        #Output: 
        a. test5.lst
        b. test5.log (without any error messages)
        c. test5.o

        6)
        #Input:asm test7.asm
        #Output: 
        a. test7.lst
        b. test7.log (without any error messages)
        c. test7.o

    2. The emulator
        *Six sample programs were tested and their output tracer files were submitted and can be checked.
        *The emulator WILL produce a file even if a file with error is used. It is USER RESPONSIBILITY to
        only emulate errorless files.
        *Macros - MEMORY_CAPACITY and EXECUTION_LIMIT can be edited in the source code to configure the 
        emulator (Read PROGRAM FORMAT AND STRUCTURE section of emulator for more details.)
        *(optional) -trace may be used to see the output on the console windows in a readable format.

        1)
        #Input: emu test1.o
        #Output: 
        a. test1.trace

        2)
        #Input: emu test2.o
        #Output: 
        a. test2.trace

        3)
        #Input:emu test3.o
        #Output: 
        a. test3.trace

        4)
        #Input:emu test4.o
        #Output: 
        a. test4.trace

        5)
        #Input:emu test5.o
        #Output: 
        a. test5.trace

        6)
        #Input:emu test7.o
        #Output: 
        a. test7.trace